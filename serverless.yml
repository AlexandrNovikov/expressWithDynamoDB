service: express-with-dynamo
plugins:
  - serverless-bundle
  - serverless-offline
provider:
  name: aws
  region: us-east-1
  stage: stage
  runtime: nodejs14.x
  memorySize: 128
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": [ "MoviesDynamoDBTable", "Arn" ] }
  environment:
    MOVIES_TABLE: ${self:custom.tableName}
functions:
  express-with-dynamo:
    handler: index.handler
    events:
      - http:
          path: /{any+}
          method: ANY
          cors: true
custom:
  serverless-offline:
    host: 0.0.0.0
  tableName: 'Movies'
  dynamodb:
    start:
      migrate: true

resources:
  Resources:
    MoviesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}